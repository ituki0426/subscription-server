scalar Upload

input newUser{
		name:String!
}

type File {
    filename: String!
    url:String!
}

type Source{
  "製作者のuid"
  uid:ID!
  "プロジェクト名"
  projectName:String!
  "firebaseのurl"
  urls:[String!]
}
"
type Source{
  uid:ID!
  projectName:String!
  files:[File!]
}
"

"ファイルのリクエスト"
input reqFile{
  uid:ID!
  project:String!
  root:String!
}
"リクエストに対するレスポンス"
type resFile{
  files:[String!]
  folders:[String!]
}

input  getURL{
  
}

type User {
  id: ID!
  name: String!
  email: String
}

type Query {
  numberSix: Int! 
  numberSeven: Int! 
}

type Mutation {
  addStudent(newStudent:newStudent):Student
  "ユーザのサインアップ"
	singleUpload(file: Upload!): File!

  signUpedUser(newUser:newUser!): User!
  "ソースコードのアップロード"
  sourceUpload(source:Source!):Source!
  "ファイルが保存してあるFirebaseのURLを返す"
  getURL(rea:getURL!):String! 
}

type Student{
		name:String!
		school:String!
}

input newStudent{
		name:String!
		school:String!
}

